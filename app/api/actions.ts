'use server';

import {
  PayOrderTemplate,
  VerificationUserTemplate,
} from '@/components/shared';
import { CheckoutFormValues } from '@/components/shared/checkout/checkout-form-schema';
import { getUserSession } from '@/lib/get-user-session';
import { sendEmail } from '@/lib/send-email';
import { prisma } from '@/prisma/prisma-client';
import { OrderStatus, Prisma } from '@prisma/client';
import { hashSync } from 'bcrypt';
import { cookies } from 'next/headers';

export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = cookies();
    const cartToken = cookieStore.get('cartToken')?.value;

    if (!cartToken) {
      throw new Error('Token not found');
    }

    /** –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        cartItems: {
          include: {
            product: true,
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    /** –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (!userCart) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    /** –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (userCart?.totalAmount === 0) {
      throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }

    /** –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        // fullName: data.firstName + ' ' + data.lastName,
        firstName: data.firstName,
        lastName: data.lastName,
        phone: data.phone,
        email: data.email,        
        address: data.address,
        comments: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.cartItems),
      },
    });

    /** –û—á–∏—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    /** –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã */
    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    // TODO: –°–¥–µ–ª–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã

    /** –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É –∫–ª–∏–µ–Ω—Ç—É */
    await sendEmail(
      data.email,
      '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è "–ü—Ä–∞–ª–∏–Ω–µ" - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #' + order.id,
      PayOrderTemplate({
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl: 'https://pralinecakes-next-tailwind.vercel.app/',
        // items: userCart.cartItems,
      })
    );

    return 'https://pralinecakes-next-tailwind.vercel.app/';
  } catch (error) {
    console.log('[CreateOrder] Server error ', error);
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();

    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        firstName: body.firstName,
        lastName: body.lastName,
        phone: body.phone,
        email: body.email,
        password: body.password
          ? hashSync(body.password as string, 10)
          : findUser?.password,
      },
    });
  } catch (error) {
    console.log('Error [UPDATE_USER_INFO] ', error);
    throw error;
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.verified) {
        throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }

      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const createdUser = await prisma.user.create({
      data: {
        firstName: body.firstName,
        lastName: body.lastName,
        phone: body.phone,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });

    const code = Math.floor(100000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    await sendEmail(
      createdUser.email,
      '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è "–ü—Ä–∞–ª–∏–Ω–µ" - üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      VerificationUserTemplate({
        code,
      })
    );
  } catch (err) {
    console.log('Error [CREATE_USER]', err);
    throw err;
  }
}
